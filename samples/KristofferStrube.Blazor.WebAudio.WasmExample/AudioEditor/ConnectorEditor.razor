@using BlazorContextMenu
@using KristofferStrube.Blazor.SVGEditor.Extensions;
@using KristofferStrube.Blazor.SVGEditor.ShapeEditors;
@using KristofferStrube.Blazor.SVGEditor;
@using Microsoft.AspNetCore.Components.Web;
@inherits ShapeEditor<Connector>

<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
    <g style="@(SVGElement.SVG.EditMode is EditMode.Add ? "pointer-events:none;" : "")" transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">
        <path @ref=ElementReference
              @onfocusin="FocusElement"
              @onfocusout="UnfocusElement"
              @onpointerdown="SelectAsync"
              @onkeyup="KeyUp"
              tabindex="@(SVGElement.IsChildElement ? -1 : 0)"
              d="M @SVGElement.X1.AsString() @SVGElement.Y1.AsString() C @((SVGElement.X1 + 100).AsString()) @SVGElement.Y1.AsString() @((SVGElement.X2 - 100).AsString()) @SVGElement.Y2.AsString() @SVGElement.X2.AsString() @SVGElement.Y2.AsString()"
              stroke="@SVGElement.Stroke"
              stroke-width="@SVGElement.StrokeWidth"
              stroke-linecap="@SVGElement.StrokeLinecap.AsString()"
              stroke-linejoin="@SVGElement.StrokeLinejoin.AsString()"
              stroke-dasharray="@SVGElement.StrokeDasharray"
              stroke-dashoffset="@SVGElement.StrokeDashoffset.AsString()"
              fill="transparent">
        </path>
    </g>
</ContextMenuTrigger>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SVGElement.UpdateLine();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}