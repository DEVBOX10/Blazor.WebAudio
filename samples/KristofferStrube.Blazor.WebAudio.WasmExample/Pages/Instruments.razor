@page "/Drums"
@page "/Instruments"
@using KristofferStrube.Blazor.DOM
@using KristofferStrube.Blazor.WebIDL;
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
<PageTitle>WebAudio - Instruments</PageTitle>
<h2>Drums</h2>

<p>
    Many intstrments are essentially just a combination of different enharmonic or harmonic modes each with different frequencies, amplitudes, and decay times + some noice from the kick.
</p>

<p>
    Below here we have a <b style="color:orange;">Timpani Drum</b>, a <b style="color:silver;">Bass Drum</b> and <b style="color:#77F;">Violin</b> Try to hitting them!
</p>

<svg width="200" height="200" @onpointerdown=PlayTimps>
    <circle cx="100" cy="100" r="90" fill="orange" stroke="orangered"></circle>
</svg>

<svg width="180" height="180" @onpointerdown=PlayBass>
    <circle cx="90" cy="90" r="80" fill="silver" stroke="grey"></circle>
</svg>
<br />
<br />
<svg width="360" height="80" @onpointerup=EndViolin @onpointermove=MoveViolin>
    <rect x="1" y="1" width="358" height="18" fill="#88F" stroke="#55F" @onpointerdown="e => StartViolin(e, 659.3f)">
    </rect>
    <text x="5" y="16" width="100" height="100" fill="white" style="pointer-events:none;">
        E<sub>5</sub>
    </text>
    <rect x="1" y="21" width="360" height="18" fill="#77F" stroke="#55F" @onpointerdown="e => StartViolin(e, 440.0f)">
    </rect>
    <text x="5" y="36" width="100" height="100" fill="white" style="pointer-events:none;">
        A<sub>4</sub>
    </text>
    <rect x="1" y="41" width="360" height="18" fill="#66F" stroke="#55F" @onpointerdown="e => StartViolin(e, 293.7f)">
    </rect>
    <text x="5" y="56" width="100" height="100" fill="white" style="pointer-events:none;">
        D<sub>4</sub>
    </text>
    <rect x="1" y="61" width="360" height="18" fill="#55F" stroke="#55F" @onpointerdown="e => StartViolin(e, 196.0f)">
    </rect>
    <text x="5" y="76" width="100" height="100" fill="white" style="pointer-events:none;">
        G<sub>3</sub>
    </text>
</svg>

<DoublePlot Data1="frequencies" />

@code {
    AudioContext context = default!;
    GainNode mainNode = default!;
    AnalyserNode analyser = default!;

    OscillatorNode? violinOscillator;
    float primaryFrequency;
    GainNode? violinMain;

    bool stopped;
    byte[] frequencies = Array.Empty<byte>();

    public async Task Initialize()
    {
        if (context is null || mainNode is null || analyser is null)
        {
            context = await AudioContext.CreateAsync(JSRuntime);
            mainNode = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0.5f });
            analyser = await context.CreateAnalyserAsync();
            var mixer = await context.GetDestinationAsync();
            await mainNode.ConnectAsync(analyser);
            await analyser.ConnectAsync(mixer);

#pragma warning disable CS4014
            Task.Run(async () =>
            {
                int bufferLength = (int)await analyser.GetFrequencyBinCountAsync();
                var dataArray = await Uint8Array.CreateAsync(JSRuntime, bufferLength);
                stopped = false;
                while (!stopped)
                {
                    await analyser.GetByteFrequencyDataAsync(dataArray);

                    frequencies = await dataArray.GetAsArrayAsync();
                    await Task.Delay(30);
                    StateHasChanged();
                }
            });
#pragma warning restore CS4014
        }
    }

    static readonly float[] timpsFrequencies = new float[] { 1.00f, 1.50f, 1.98f, 2.44f };
    static readonly float[] timpsAmplitudes = new float[] { 1, 0.8f, 0.6f, 0.2f };
    static readonly float[] timpsDecays = new float[] { 4.5f, 7.5f, 9f, 8.5f };
    public async Task PlayTimps(PointerEventArgs eventArgs)
    {
        await Initialize();

        float distanceFromMid = (float)Math.Sqrt(Math.Pow(eventArgs.OffsetX - 100, 2) + Math.Pow(eventArgs.OffsetY - 100, 2));
        if (distanceFromMid > 90) return;
        float pitch = 100 + distanceFromMid;

        GainNode[]? oscillatorAmplifiers = new GainNode[4];
        for (int i = 0; i < 4; i++)
        {
            var oscillator = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Type = OscillatorType.Sine, Frequency = timpsFrequencies[i] * pitch });
            var amplifier = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });
            await oscillator.ConnectAsync(amplifier);
            await amplifier.ConnectAsync(mainNode);
            oscillatorAmplifiers[i] = amplifier;
            await oscillator.StartAsync();
        }

        var time = await context.GetCurrentTimeAsync();

        for (int i = 0; i < 4; i++)
        {
            var gain = await oscillatorAmplifiers[i].GetGainAsync();
            await gain.SetValueAsync(await gain.GetValueAsync());
            await gain.LinearRampToValueAtTimeAsync(timpsAmplitudes[i] / timpsAmplitudes.Sum(), time + 0.3);
            await gain.LinearRampToValueAtTimeAsync(0, time + timpsDecays[i] * 0.1);
        }

        var noiseCarrier = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Frequency = 100 });
        var noiseModulator = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Frequency = 87 });
        var noiseRingModulator = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });
        var noiseGain = await noiseRingModulator.GetGainAsync();
        var noiseHighPassFilter = await BiquadFilterNode.CreateAsync(JSRuntime, context, new() { Type = BiquadFilterType.Highpass, Frequency = 150, Q = 1 });
        var noiseAmplifier = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });
        await noiseCarrier.ConnectAsync(noiseRingModulator);
        await noiseModulator.ConnectAsync(noiseGain);
        await noiseRingModulator.ConnectAsync(noiseHighPassFilter);
        await noiseHighPassFilter.ConnectAsync(noiseAmplifier);
        await noiseAmplifier.ConnectAsync(mainNode);
        await noiseCarrier.StartAsync();
        await noiseModulator.StartAsync();
        var noiseAmplifierGain = await noiseAmplifier.GetGainAsync();
        await noiseAmplifierGain.LinearRampToValueAtTimeAsync(0.2f, time + 0.3);
        await noiseAmplifierGain.LinearRampToValueAtTimeAsync(0, time + timpsDecays.Max() * 0.1);
    }

    static readonly float[] bassFrequencies = new float[] { 1.00f, 1.86f, 2.72f, 3.64f, 4.50f, 5.46f };
    public async Task PlayBass(PointerEventArgs eventArgs)
    {
        await Initialize();

        float distanceFromMid = (float)Math.Sqrt(Math.Pow(eventArgs.OffsetX - 90, 2) + Math.Pow(eventArgs.OffsetY - 90, 2));
        if (distanceFromMid > 80) return;
        float pitch = 40 + distanceFromMid / 4;

        GainNode[]? oscillatorAmplifiers = new GainNode[6];
        for (int i = 0; i < 6; i++)
        {
            var oscillator = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Type = OscillatorType.Sine, Frequency = bassFrequencies[i] * pitch });
            var amplifier = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });
            await oscillator.ConnectAsync(amplifier);
            await amplifier.ConnectAsync(mainNode);
            oscillatorAmplifiers[i] = amplifier;
            await oscillator.StartAsync();
        }

        var time = await context.GetCurrentTimeAsync();

        for (int i = 0; i < 6; i++)
        {
            var gain = await oscillatorAmplifiers[i].GetGainAsync();
            await gain.SetValueAsync(await gain.GetValueAsync());
            await gain.LinearRampToValueAtTimeAsync(1 / (float)6, time + 0.2);
            await gain.LinearRampToValueAtTimeAsync(0, time + 0.3);
        }

        var midFrequencyModulator = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Frequency = 87 });
        var midFrequencyModulatorAmplifier = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 375 });
        var midFrequencyCarrier = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Frequency = 625 });
        var midFrequencyBandPassFilter = await BiquadFilterNode.CreateAsync(JSRuntime, context, new() { Type = BiquadFilterType.Bandpass, Frequency = 625, Q = 2 });
        var midFrequencyGain = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });
        await midFrequencyModulator.ConnectAsync(midFrequencyModulatorAmplifier);
        var carrierFrequency = await midFrequencyCarrier.GetFrequencyAsync();
        await midFrequencyModulatorAmplifier.ConnectAsync(carrierFrequency);
        await midFrequencyCarrier.ConnectAsync(midFrequencyBandPassFilter);
        await midFrequencyBandPassFilter.ConnectAsync(midFrequencyGain);
        await midFrequencyGain.ConnectAsync(mainNode);
        await midFrequencyModulator.StartAsync();
        await midFrequencyCarrier.StartAsync();
        var midGain = await midFrequencyGain.GetGainAsync();
        await midGain.LinearRampToValueAtTimeAsync(0.05f, time + 0.2);
        await midGain.LinearRampToValueAtTimeAsync(0, time + 0.3);
    }

    private SemaphoreSlim violinSemaphore = new SemaphoreSlim(1, 1);
    public async Task StartViolin(PointerEventArgs eventArgs, float primaryFrequency)
    {
        await Initialize();

        if (!await violinSemaphore.WaitAsync(50)) return;

        if (violinMain is not null)
        {
            await violinMain.DisconnectAsync();
        }

        this.primaryFrequency = primaryFrequency;
        double position = eventArgs.OffsetX;
        float frequency = (float)(primaryFrequency + position / 4 - 45);

        violinOscillator = await OscillatorNode.CreateAsync(JSRuntime, context, new()
            {
                Type = OscillatorType.Sawtooth,
                Frequency = frequency
            });
        await using var lowPassFilter = await BiquadFilterNode.CreateAsync(JSRuntime, context, new()
            {
                Type = BiquadFilterType.Lowpass,
                Frequency = 6000
            });
        await using var highPassFilter = await BiquadFilterNode.CreateAsync(JSRuntime, context, new()
            {
                Type = BiquadFilterType.Highpass,
                Frequency = 200
            });

        await using var band300 = await BiquadFilterNode.CreateAsync(JSRuntime, context, new()
            {
                Type = BiquadFilterType.Bandpass,
                Frequency = 300,
            });

        await using var band700 = await BiquadFilterNode.CreateAsync(JSRuntime, context, new()
            {
                Type = BiquadFilterType.Bandpass,
                Frequency = 700,
            });

        await using var brand3000 = await BiquadFilterNode.CreateAsync(JSRuntime, context, new()
            {
                Type = BiquadFilterType.Bandpass,
                Frequency = 3000,
            });

        violinMain = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });

        await violinOscillator.ConnectAsync(lowPassFilter);
        await lowPassFilter.ConnectAsync(highPassFilter);

        await highPassFilter.ConnectAsync(band300);
        await highPassFilter.ConnectAsync(band700);
        await highPassFilter.ConnectAsync(brand3000);

        await band300.ConnectAsync(violinMain);
        await band700.ConnectAsync(violinMain);
        await brand3000.ConnectAsync(violinMain);

        await violinMain.ConnectAsync(mainNode);
        await violinOscillator.StartAsync();

        var time = await context.GetCurrentTimeAsync();
        await using var amplifierGain = await violinMain.GetGainAsync();
        await amplifierGain.LinearRampToValueAtTimeAsync(0.2f, time + 0.2);

        violinSemaphore.Release();
    }

    public async Task MoveViolin(PointerEventArgs eventArgs)
    {
        if (violinOscillator is null) return;
        if (!await violinSemaphore.WaitAsync(50)) return;
        if (violinOscillator is null) return;

        double position = eventArgs.OffsetX;
        float frequency = (float)(primaryFrequency + position / 4 - 45);

        await using var frequencyParameter = await violinOscillator.GetFrequencyAsync();
        await frequencyParameter.SetValueAsync(frequency);

        violinSemaphore.Release();
    }

    public async Task EndViolin(PointerEventArgs eventArgs)
    {
        if (!await violinSemaphore.WaitAsync(50)) return;

        if (violinMain is null || violinOscillator is null) return;

        var time = await context.GetCurrentTimeAsync();
        await using var amplifierGain = await violinMain.GetGainAsync();
        await amplifierGain.LinearRampToValueAtTimeAsync(0, time + 0.5);

        var localViolinMain = violinMain;
        violinMain = null;

        var localViolinOscillator = violinOscillator;
        violinOscillator = null;

        violinSemaphore.Release();

        await Task.Delay(700);
        await localViolinMain.DisconnectAsync();
        await localViolinMain.DisposeAsync();
        await localViolinOscillator.DisconnectAsync();
        await localViolinOscillator.DisposeAsync();
    }

    public async Task StopSound()
    {
        if (mainNode is null || analyser is null) return;

        await mainNode.DisconnectAsync(analyser);

        stopped = true;
    }

    public async ValueTask DisposeAsync()
    {
        await StopSound();
    }
}


