@page "/AudioWorklets"
@using KristofferStrube.Blazor.DOM
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
<PageTitle>WebAudio - Audio Worklets</PageTitle>
<h2>Audio Worklets</h2>

<p>Here we can play sound that is generated using Audio Worklet Processors. An <code>AudioWorkle Processor</code> that can manipulate or generate sound in any custom way.</p>

@if (worktletNode is null && processor is null)
{
    <div style="display:flex; flex-direction:column; grid-gap: 5px;">
        <button class="btn btn-success" @onclick=PlayWhiteSound>Play Sound from static JS White Noise Generator</button>
        <hr />
        <button class="btn btn-success" @onclick=PlayMonoPullProcessedSound>Play Mono Sound that is pulled from Blazor</button>
        <button class="btn btn-success" @onclick=PlayStereoPullProcessedSound>Play Stereo Sound that is pulled from Blazor</button>
        <div>
            <label for="lowTide">Low Tide</label>
            <input id="lowTide" @bind=options.LowTide />
        </div>
        <div>
            <label for="highTide">High Tide</label>
            <input id="highTide" @bind=options.HighTide />
        </div>
        <div>
            <label for="bufferRequestSize">Buffer Request Size</label>
            <input id="bufferRequestSize" @bind=options.BufferRequestSize />
        </div>
        <div>
            <label for="resolution">Resolution&nbsp;</label>
            @if (options.Resolution is PullAudioWorkletProcessor.Resolution.Byte)
            {
                <button id="resolution" class="btn btn-warning btn-sm" @onclick="() => options.Resolution = PullAudioWorkletProcessor.Resolution.Double">Low resolution (byte)</button>
            }
            else
            {
                <button id="resolution" class="btn btn-success btn-sm" @onclick="() => options.Resolution = PullAudioWorkletProcessor.Resolution.Byte">Full resolution (double)</button>
            }
        </div>
        <hr />
    </div>
}
else
{
    <button class="btn btn-warning" @onclick=StopSound>Stop Sound</button>
}
<br />
<GainSlider GainNode=gainNode />

@code {
    PullAudioWorkletProcessor.Options options = new();

    PullAudioWorkletProcessor? processor;
    AudioWorkletNode? worktletNode;

    AudioContext? context;

    AudioDestinationNode? destination;
    GainNode? gainNode;

    public async Task PlayWhiteSound()
    {
        // Get context.
        context = await AudioContext.CreateAsync(JSRuntime);

        // Register module
        await using AudioWorklet audioWorklet = await context.GetAudioWorkletAsync();
        await audioWorklet.AddModuleAsync("js/white-noise.js");

        // Create node from registered processor.
        worktletNode = await AudioWorkletNode.CreateAsync(JSRuntime, context, "white-noise");

        // Get destination and connect worklet node through gainNode
        destination = await context.GetDestinationAsync();
        gainNode = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0.05f });
        await worktletNode.ConnectAsync(gainNode);
        await gainNode.ConnectAsync(destination);
    }

    public async Task PlayMonoPullProcessedSound()
    {
        // Get context.
        context = await AudioContext.CreateAsync(JSRuntime);

        options.ProduceMono = () => Random.Shared.NextDouble() * 2 - 1;
        options.ProduceStereo = null;

        // Create and register node.
        processor = await PullAudioWorkletProcessor.CreateAsync(context, options);

        // Get destination and connect worklet node through gainNode
        destination = await context.GetDestinationAsync();
        gainNode = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0.05f });
        await processor.Node.ConnectAsync(gainNode);
        await gainNode.ConnectAsync(destination);
    }

    public async Task PlayStereoPullProcessedSound()
    {
        // Get context.
        context = await AudioContext.CreateAsync(JSRuntime);

        options.ProduceMono = null;
        options.ProduceStereo = () => (left: Random.Shared.NextDouble() * 2 - 1, right: Random.Shared.NextDouble() * 2 - 1);

        // Create and register node.
        processor = await PullAudioWorkletProcessor.CreateAsync(context, options);

        // Get destination and connect worklet node through gainNode
        destination = await context.GetDestinationAsync();
        gainNode = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0.05f });
        await processor.Node.ConnectAsync(gainNode);
        await gainNode.ConnectAsync(destination);
    }

    public async Task StopSound()
    {
        if (context is not null)
        {
            await context.DisposeAsync();
        }

        if (destination is not null)
        {
            await destination.DisposeAsync();
            destination = null;
        }

        if (gainNode is not null)
        {
            var localGainNode = gainNode;
            gainNode = null;
            await localGainNode.DisconnectAsync();
        }

        if (processor is not null)
        {
            await processor.DisposeAsync();
            processor = null;
        }

        if (worktletNode is not null)
        {
            await worktletNode.DisconnectAsync();
            await worktletNode.DisposeAsync();
            worktletNode = null;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await StopSound();
    }
}


